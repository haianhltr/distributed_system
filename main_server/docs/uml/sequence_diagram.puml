@startuml Job Processing Sequence Diagram

actor "Admin" as Admin
participant "Main Server" as Server
participant "JobService" as JobSvc
participant "Database" as DB
participant "Bot" as Bot
participant "BotService" as BotSvc
participant "DatalakeManager" as Datalake

== Job Creation ==
Admin -> Server: POST /jobs/populate
Server -> JobSvc: create_jobs(job_data)
JobSvc -> DB: INSERT jobs (pending)
DB --> JobSvc: Job created
JobSvc --> Server: Jobs created response
Server --> Admin: Batch of jobs created

== Bot Registration ==
Bot -> Server: POST /bots/register
Server -> BotSvc: register_bot(bot_data)
BotSvc -> DB: INSERT bot (idle)
DB --> BotSvc: Bot registered
BotSvc --> Server: Bot registered
Server --> Bot: Registration successful

== Operation Assignment ==
Admin -> Server: POST /bots/{bot_id}/assign-operation
Server -> BotSvc: assign_operation(bot_id, operation)
BotSvc -> DB: UPDATE bot.assigned_operation
DB --> BotSvc: Operation assigned
BotSvc --> Server: Operation assigned
Server --> Admin: Operation assigned to bot

== Job Claiming ==
Bot -> Server: POST /jobs/claim
Server -> JobSvc: claim_job(claim_data)
JobSvc -> DB: SELECT available job matching operation
DB --> JobSvc: Available job
JobSvc -> DB: UPDATE job status = 'claimed'
JobSvc -> DB: UPDATE bot status = 'busy'
DB --> JobSvc: Job claimed
JobSvc --> Server: Job details
Server --> Bot: Job claimed successfully

== Job Processing ==
Bot -> Server: POST /jobs/{job_id}/start
Server -> JobSvc: start_job(job_id, start_data)
JobSvc -> DB: UPDATE job status = 'processing'
DB --> JobSvc: Job started
JobSvc --> Server: Job started
Server --> Bot: Processing started

note over Bot: Bot executes operation\n(a + b, a - b, a * b, a / b)

Bot -> Server: POST /jobs/{job_id}/complete
Server -> JobSvc: complete_job(job_id, complete_data)
JobSvc -> DB: UPDATE job status = 'succeeded'
JobSvc -> DB: INSERT result record
JobSvc -> DB: UPDATE bot status = 'idle'
JobSvc -> Datalake: append_result(result_data)
Datalake --> JobSvc: Result stored
JobSvc --> Server: Job completed
Server --> Bot: Job completed successfully

== Bot Heartbeat ==
loop Every 2 minutes
    Bot -> Server: POST /bots/heartbeat
    Server -> BotSvc: update_heartbeat(heartbeat_data)
    BotSvc -> DB: UPDATE last_heartbeat_at
    DB --> BotSvc: Heartbeat updated
    BotSvc --> Server: Heartbeat OK
    Server --> Bot: Heartbeat received
end

== Cleanup & Recovery ==
note over Server: Background tasks
Server -> Server: recover_orphaned_jobs()
Server -> DB: SELECT jobs from dead bots
DB --> Server: Orphaned jobs
Server -> DB: UPDATE job status = 'pending'
Server -> DB: UPDATE bot status = 'idle'

Server -> Server: auto_populate_jobs()
Server -> DB: INSERT new pending jobs
DB --> Server: New jobs created

@enduml
